buildscript {
    repositories {
        mavenCentral()
    }
    dependencies {
        classpath "com.avast.gradle:gradle-docker-compose-plugin:$DOCKER_COMPOSE_PLUGIN_VERSION"
        classpath "io.github.asharapov.nexus:nexus-casc-plugin:$NEXUS_CASC_PLUGIN_VERSION:bundle@kar"
    }
}

task clean(type: Delete) {
    delete fileTree('config/nginx-www').matching {
        exclude '.gitkeep'
    }
    delete fileTree('lib').matching {
        exclude '.gitkeep'
    }
}

task grabLatestCascPlugin(type: Copy) {
    from buildscript.configurations.classpath
    include "nexus-casc-plugin*"
    rename ("nexus-casc-plugin-$NEXUS_CASC_PLUGIN_VERSION-bundle.kar", "nexus-casc-plugin-bundle.kar")
    into "$projectDir/lib"
}

task generateWwwContent(type: Copy) {
    from "$projectDir/config/nginx-www-template"
    into "$projectDir/config/nginx-www"
    rename '(.+).template', '$1'
    expand(project.properties)
}

task printNexusPlatformLandingPage(type: Task) {
    doLast {
        println ''
        println '============================================================'
        println '  _________                     __                          '
        println '  /   _____/ ____   ____ _____ _/  |_ ___.__.______   ____  '
        println '  \\_____  \\ /  _ \\ /    \\\\__  \\\\   __<   |  |\\____ \\_/ __ \\ '
        println '  /        (  <_> )   |  \\/ __ \\|  |  \\___  ||  |_> >  ___/ '
        println ' /_______  /\\____/|___|  (____  /__|  / ____||   __/ \\___  >'
        println '         \\/            \\/     \\/     \\/     |__|        \\/ '
        println '============================================================'
        println ''
        println 'Access your local Nexus Platform at http://nexus-platform.localhost'
        println ''
    }
}

apply plugin: 'docker-compose'

dockerCompose {
    main {
        useComposeFiles = ['compose-files/nginx-reverse-proxy.yaml', 'compose-files/nexus-repository.yaml', 'compose-files/nexus-iq-server.yaml']
        environment.put 'DOCKER_ROOT_VOLUME_MOUNT_POINT', "$DOCKER_ROOT_VOLUME_MOUNT_POINT"
        environment.put 'NEXUS_CASC_PLUGIN_PATH', "$projectDir/lib/nexus-casc-plugin-bundle.kar"
        environment.put 'NEXUS_LICENSE_PATH', "$NEXUS_LICENSE_PATH"
        environment.put "NEXUS_IQ_SERVER_VERSION", "$NEXUS_IQ_SERVER_VERSION"
        environment.put "NEXUS_REPOSITORY_VERSION", "$NEXUS_REPOSITORY_VERSION"
        environment.put "NGINX_VERSION", "$NGINX_VERSION"
    }
    noReverseProxy {
        useComposeFiles = ['compose-files/nexus-repository.yaml', 'compose-files/nexus-iq-server.yaml']
        environment.put 'DOCKER_ROOT_VOLUME_MOUNT_POINT', "$DOCKER_ROOT_VOLUME_MOUNT_POINT"
        environment.put 'NEXUS_CASC_PLUGIN_PATH', "$projectDir/lib/nexus-casc-plugin-bundle.kar"
        environment.put 'NEXUS_LICENSE_PATH', "$NEXUS_LICENSE_PATH"
        environment.put "NEXUS_IQ_SERVER_VERSION", "$NEXUS_IQ_SERVER_VERSION"
        environment.put "NEXUS_REPOSITORY_VERSION", "$NEXUS_REPOSITORY_VERSION"
    }
}

// Default/Main Architecture: nexusPlatform
task nexusPlatformUp(type: Task) {}
nexusPlatformUp.dependsOn(printNexusPlatformLandingPage)
printNexusPlatformLandingPage.dependsOn(mainComposeUp)
mainComposeUp.dependsOn([grabLatestCascPlugin, generateWwwContent])

task nexusPlatformDown(type: Task) {}
nexusPlatformDown.dependsOn(mainComposeDown)

// No nGinx Archiecture: noReverseProxy
task noReverseProxyUp(type: Task) {}
noReverseProxyUp.dependsOn(noReverseProxyComposeUp)

task noReverseProxyDown(type: Task) {}
noReverseProxyDown.dependsOn(noReverseProxyComposeDown)

// Print information about Nexus Platform
// printNexusPlatformLandingPage.shouldRunAfter mainComposeUp